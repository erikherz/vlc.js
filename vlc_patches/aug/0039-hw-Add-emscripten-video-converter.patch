From 976b46df95e3849ab2e4c66d49d659df6cf96ac3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Hugo=20Beauz=C3=A9e-Luyssen?= <hugo@beauzee.fr>
Date: Wed, 16 Mar 2022 11:26:13 +0100
Subject: [PATCH 39/85] hw: Add emscripten video converter

---
 modules/Makefile.am                 |   1 +
 modules/hw/emscripten/Makefile.am   |  10 +++
 modules/hw/emscripten/converter.cpp | 131 ++++++++++++++++++++++++++++
 3 files changed, 142 insertions(+)
 create mode 100644 modules/hw/emscripten/Makefile.am
 create mode 100644 modules/hw/emscripten/converter.cpp

diff --git a/modules/Makefile.am b/modules/Makefile.am
index 333acb0586..0c931d51ca 100644
--- a/modules/Makefile.am
+++ b/modules/Makefile.am
@@ -31,6 +31,7 @@ include hw/d3d11/Makefile.am
 include hw/vaapi/Makefile.am
 include hw/vdpau/Makefile.am
 include hw/mmal/Makefile.am
+include hw/emscripten/Makefile.am
 include isa/aarch64/Makefile.am
 include isa/arm/Makefile.am
 include isa/riscv/Makefile.am
diff --git a/modules/hw/emscripten/Makefile.am b/modules/hw/emscripten/Makefile.am
new file mode 100644
index 0000000000..0402b1438b
--- /dev/null
+++ b/modules/hw/emscripten/Makefile.am
@@ -0,0 +1,10 @@
+emscriptendir = $(pluginsdir)/emscripten
+
+libglconverter_emscripten_plugin_la_SOURCES = hw/emscripten/converter.cpp
+libglconverter_emscripten_plugin_la_CPPFLAGS = $(AM_CPPFLAGS)
+libglconverter_emscripten_plugin_la_CXXFLAGS = $(AM_CXXFLAGS)
+libglconverter_emscripten_plugin_la_LIBADD = $(AM_LIBADD) 
+
+if HAVE_EMSCRIPTEN
+emscripten_LTLIBRARIES = libglconverter_emscripten_plugin.la
+endif
diff --git a/modules/hw/emscripten/converter.cpp b/modules/hw/emscripten/converter.cpp
new file mode 100644
index 0000000000..623fc69919
--- /dev/null
+++ b/modules/hw/emscripten/converter.cpp
@@ -0,0 +1,131 @@
+/*****************************************************************************
+ * webcodec.cpp: VLC picture to WebCodec VideoFrame
+ *****************************************************************************
+ * Copyright (C) 2022 VLC authors, VideoLAN and VideoLabs
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation; either version 2.1 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+ *****************************************************************************/
+
+#ifdef HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include <vlc_common.h>
+#include <vlc_filter.h>
+#include <vlc_plugin.h>
+
+#include <emscripten/emscripten.h>
+#include <emscripten/em_js.h>
+#include <emscripten/val.h>
+
+struct chroma_sys_t
+{
+};
+
+static picture_t* UploadSurface(filter_t* filter, picture_t* src)
+{
+    auto size = 0u;
+    for ( auto i = 0; i < src->i_planes; ++i )
+        size += src->p[i].i_lines * src->p[i].i_pitch;
+    auto buffer = emscripten::val::global("Uint8Array").new_( size );
+    auto planesLayout = emscripten::val::array();
+    auto offset = 0u;
+    for ( auto i = 0; i < src->i_planes; ++i )
+    {
+        auto planeSize = src->p[i].i_lines * src->p[i].i_pitch;
+        auto p = emscripten::typed_memory_view( planeSize, src->p[i].p_pixels );
+        buffer.call<void>("set", p, offset);
+        auto layout = emscripten::val::object();
+        layout.set("offset", offset);
+        layout.set("stride", src->p[i].i_pitch);
+        planesLayout.call<void>( "push", layout );
+        offset += planeSize;
+    }
+
+    auto init = emscripten::val::object();
+    init.set( "format", "I420" );
+    init.set( "codedWidth", src->format.i_width );
+    init.set( "codedHeight", src->format.i_height );
+    init.set( "timestamp", (long)US_FROM_VLC_TICK( src->date ) );
+    init.set( "layout", planesLayout );
+    init.set( "displayWidth", src->format.i_visible_width);
+    init.set( "displayHeight", src->format.i_visible_height );
+
+    auto visibleRect = emscripten::val::object();
+    visibleRect.set( "x", src->format.i_x_offset );
+    visibleRect.set( "y", src->format.i_y_offset );
+    visibleRect.set( "width", src->format.i_visible_width);
+    visibleRect.set( "height", src->format.i_visible_height );
+    init.set( "visibleRect", visibleRect );
+
+    auto frame = emscripten::val::global("VideoFrame").new_( buffer, init );
+    uintptr_t pictureId = EM_ASM_INT({return Module['pictureId']});
+    EM_ASM({
+               let frame = Emval.toValue($0);
+               Module.msgChannel.port2.postMessage({
+                   customCmd: 'displayFrame',
+                   pictureId: Module.pictureId,
+                   frame: frame
+               });
+               Module.pictureId = Module.pictureId + 1;
+    }, frame.as_handle());
+    auto dst = filter_NewPicture( filter );
+    if (dst == nullptr)
+    {
+        picture_Release(src);
+        return nullptr;
+    }
+    dst->p_sys = reinterpret_cast<void*>( pictureId );
+    picture_CopyProperties( dst, src );
+    picture_Release(src);
+    return dst;
+}
+
+static void vlc_webcodec_CloseChroma(filter_t* filter)
+{
+
+}
+
+static const struct vlc_filter_operations filter_ops = {
+    .filter_video = UploadSurface,   .close = vlc_webcodec_CloseChroma,
+};
+
+static int vlc_webcodec_OpenChroma(filter_t* filter)
+{
+    if (filter->fmt_in.video.i_height != filter->fmt_out.video.i_height
+     || filter->fmt_in.video.i_width != filter->fmt_out.video.i_width
+     || filter->fmt_in.video.orientation != filter->fmt_out.video.orientation)
+    {
+        return VLC_EGENERIC;
+    }
+
+    if (filter->fmt_out.video.i_chroma != VLC_CODEC_WEBCODEC_OPAQUE)
+        return VLC_EGENERIC;
+    if (filter->fmt_in.video.i_chroma != VLC_CODEC_I420)
+        return VLC_EGENERIC;
+
+    filter->ops = &filter_ops;
+    EM_ASM({Module.pictureId = 0;});
+    return VLC_SUCCESS;
+}
+
+vlc_module_begin()
+    set_shortname(N_("WebCodec filters"))
+    set_description(N_("WebCodec filters"))
+    set_subcategory(SUBCAT_VIDEO_VFILTER)
+
+    add_submodule()
+    set_callback_video_converter(vlc_webcodec_OpenChroma, 10)
+vlc_module_end()
-- 
2.43.0

