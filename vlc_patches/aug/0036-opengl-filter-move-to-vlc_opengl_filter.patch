From 7e7245bd0864fa779140f1f7c2283b6fccbfa11d Mon Sep 17 00:00:00 2001
From: Alexandre Janniaux <ajanni@videolabs.io>
Date: Wed, 23 Feb 2022 13:40:41 +0100
Subject: [PATCH 36/85] opengl: filter: move to vlc_opengl_filter

---
 include/vlc_opengl_filter.h          |  67 ++++++++-----
 modules/video_output/opengl/filter.h | 137 +--------------------------
 2 files changed, 42 insertions(+), 162 deletions(-)

diff --git a/include/vlc_opengl_filter.h b/include/vlc_opengl_filter.h
index 02228ec15c..3a1f18197d 100644
--- a/include/vlc_opengl_filter.h
+++ b/include/vlc_opengl_filter.h
@@ -1,5 +1,5 @@
 /*****************************************************************************
- * filter.h
+ * vlc_opengl_filter.h
  *****************************************************************************
  * Copyright (C) 2020 VLC authors and VideoLAN
  * Copyright (C) 2020 Videolabs
@@ -19,13 +19,14 @@
  * Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
  *****************************************************************************/
 
-#ifndef VLC_GL_FILTER_H
-#define VLC_GL_FILTER_H
+#ifndef VLC_OPENGL_FILTER_H
+#define VLC_OPENGL_FILTER_H
 
 #include <vlc_tick.h>
 
 struct vlc_gl_filter;
-struct vlc_gl_sampler;
+struct vlc_gl_picture;
+struct vlc_gl_format;
 
 #ifdef __cplusplus
 extern "C"
@@ -45,37 +46,58 @@ struct vlc_gl_input_meta {
 typedef int
 vlc_gl_filter_open_fn(struct vlc_gl_filter *filter,
                       const config_chain_t *config,
+                      const struct vlc_gl_format *glfmt,
                       struct vlc_gl_tex_size *size_out);
 
+#define set_callback_opengl_filter(open) \
+    { \
+        vlc_gl_filter_open_fn *fn = open; \
+        (void) fn; \
+        set_callback(fn); \
+    }
+
 struct vlc_gl_filter_ops {
     /**
      * Draw the result of the filter to the current framebuffer
      */
-    int (*draw)(struct vlc_gl_filter *filter,
+    int (*draw)(struct vlc_gl_filter *filter, const struct vlc_gl_picture *pic,
                 const struct vlc_gl_input_meta *meta);
 
     /**
      * Free filter resources
      */
     void (*close)(struct vlc_gl_filter *filter);
-};
 
-struct vlc_gl_filter_owner_ops {
     /**
-     * Get the sampler associated to this filter.
+     * Request a (responsive) filter to adapt its output size (optional)
+     *
+     * A responsive filter is a filter for which the size of the produced
+     * pictures depends on the output (e.g. display) size rather than the
+     * input. This is for example the case for a renderer.
      *
-     * The instance is lazy-loaded (to avoid creating one for blend filters).
-     * Successive calls to this function for the same filter is guaranteed to
-     * always return the same sampler.
+     * A new output size is requested (size_out). The filter is authorized to
+     * change the size_out to enforce its own constraints.
      *
-     * Important: filter->config must be initialized *before* getting the
-     * sampler, since the sampler behavior may depend on it.
+     * In addition, it may request to the previous filter (if any) an optimal
+     * size it wants to receive. If set to non-zero value, this previous filter
+     * will receive this size as its requested size (and so on).
      *
-     * \param filter the filter
-     * \return sampler the sampler, NULL on error
+     * \retval true if the resize is accepted (possibly with a modified
+     *              size_out)
+     * \retval false if the resize is rejected (included on error)
      */
-    struct vlc_gl_sampler *
-    (*get_sampler)(struct vlc_gl_filter *filter);
+    int (*request_output_size)(struct vlc_gl_filter *filter,
+                               struct vlc_gl_tex_size *size_out,
+                               struct vlc_gl_tex_size *optimal_in);
+
+    /**
+     * Callback to notify input size changes
+     *
+     * When a filter changes its output size as a result of
+     * request_output_size(), the next filter is notified by this callback.
+     */
+    void (*on_input_size_change)(struct vlc_gl_filter *filter,
+                                 const struct vlc_gl_tex_size *size);
 };
 
 /**
@@ -85,8 +107,9 @@ struct vlc_gl_filter {
     vlc_object_t obj;
     module_t *module;
 
-    vlc_gl_t *gl;
+    struct vlc_gl_t *gl;
     const struct vlc_gl_api *api;
+    const struct vlc_gl_format *glfmt_in;
 
     struct {
         /**
@@ -125,16 +148,8 @@ struct vlc_gl_filter {
 
     const struct vlc_gl_filter_ops *ops;
     void *sys;
-
-    const struct vlc_gl_filter_owner_ops *owner_ops;
 };
 
-static inline struct vlc_gl_sampler *
-vlc_gl_filter_GetSampler(struct vlc_gl_filter *filter)
-{
-    return filter->owner_ops->get_sampler(filter);
-}
-
 #ifdef __cplusplus
 }
 #endif
diff --git a/modules/video_output/opengl/filter.h b/modules/video_output/opengl/filter.h
index d8b672cc35..b8272a5115 100644
--- a/modules/video_output/opengl/filter.h
+++ b/modules/video_output/opengl/filter.h
@@ -19,139 +19,4 @@
  * Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
  *****************************************************************************/
 
-#ifndef VLC_GL_FILTER_H
-#define VLC_GL_FILTER_H
-
-#include <vlc_tick.h>
-
-struct vlc_gl_filter;
-struct vlc_gl_picture;
-struct vlc_gl_format;
-
-#ifdef __cplusplus
-extern "C"
-{
-#endif
-
-struct vlc_gl_tex_size {
-    unsigned width;
-    unsigned height;
-};
-
-struct vlc_gl_input_meta {
-    vlc_tick_t pts;
-    unsigned plane;
-};
-
-typedef int
-vlc_gl_filter_open_fn(struct vlc_gl_filter *filter,
-                      const config_chain_t *config,
-                      const struct vlc_gl_format *glfmt,
-                      struct vlc_gl_tex_size *size_out);
-
-#define set_callback_opengl_filter(open) \
-    { \
-        vlc_gl_filter_open_fn *fn = open; \
-        (void) fn; \
-        set_callback(fn); \
-    }
-
-struct vlc_gl_filter_ops {
-    /**
-     * Draw the result of the filter to the current framebuffer
-     */
-    int (*draw)(struct vlc_gl_filter *filter, const struct vlc_gl_picture *pic,
-                const struct vlc_gl_input_meta *meta);
-
-    /**
-     * Free filter resources
-     */
-    void (*close)(struct vlc_gl_filter *filter);
-
-    /**
-     * Request a (responsive) filter to adapt its output size (optional)
-     *
-     * A responsive filter is a filter for which the size of the produced
-     * pictures depends on the output (e.g. display) size rather than the
-     * input. This is for example the case for a renderer.
-     *
-     * A new output size is requested (size_out). The filter is authorized to
-     * change the size_out to enforce its own constraints.
-     *
-     * In addition, it may request to the previous filter (if any) an optimal
-     * size it wants to receive. If set to non-zero value, this previous filter
-     * will receive this size as its requested size (and so on).
-     *
-     * \retval true if the resize is accepted (possibly with a modified
-     *              size_out)
-     * \retval false if the resize is rejected (included on error)
-     */
-    int (*request_output_size)(struct vlc_gl_filter *filter,
-                               struct vlc_gl_tex_size *size_out,
-                               struct vlc_gl_tex_size *optimal_in);
-
-    /**
-     * Callback to notify input size changes
-     *
-     * When a filter changes its output size as a result of
-     * request_output_size(), the next filter is notified by this callback.
-     */
-    void (*on_input_size_change)(struct vlc_gl_filter *filter,
-                                 const struct vlc_gl_tex_size *size);
-};
-
-/**
- * OpenGL filter, in charge of a rendering pass.
- */
-struct vlc_gl_filter {
-    vlc_object_t obj;
-    module_t *module;
-
-    struct vlc_gl_t *gl;
-    const struct vlc_gl_api *api;
-    const struct vlc_gl_format *glfmt_in;
-
-    struct {
-        /**
-         * An OpenGL filter may either operate on the input RGBA picture, or on
-         * individual input planes (without chroma conversion) separately.
-         *
-         * In practice, this is useful for deinterlace filters.
-         *
-         * This flag must be set by the filter module (default is false).
-         */
-        bool filter_planes;
-
-        /**
-         * A blend filter draws over the input picture (without reading it).
-         *
-         * Meaningless if filter_planes is true.
-         *
-         * This flag must be set by the filter module (default is false).
-         */
-        bool blend;
-
-        /**
-         * Request MSAA level.
-         *
-         * This value must be set by the filter module (default is 0, which
-         * means disabled).
-         *
-         * Meaningless if filter_planes is true.
-         *
-         * The actual MSAA level may be overwritten to 0 if multisampling is
-         * not supported, or to a higher value if another filter rendering on
-         * the same framebuffer requested a higher MSAA level.
-         */
-        unsigned msaa_level;
-    } config;
-
-    const struct vlc_gl_filter_ops *ops;
-    void *sys;
-};
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif
+#include <vlc_opengl_filter.h>
-- 
2.43.0

